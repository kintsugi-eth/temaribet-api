# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  name: String!
  slug: String!
  icon: String!
  isActive: Boolean!
  parent: String!
}

input CategoryDto {
  name: String!
  slug: String!
  icon: String!
  isActive: Boolean!
  parent: String!
}

type ContentType {
  name: String!
}

input ContentTypeDto {
  name: String!
}

type Course {
  instructor: Instructor!
  category: Category!
  courseLevel: CourseLevel!
  courseTitle: String!
  courseSlug: String!
  keywords: [String!]!
  overview: String!
  courseImage: String!
  language: Language!
  duration: String!
  price: Float!
  rate: Float!
  rateCount: Float!
  strikeOutPrice: Float!
  isActive: Boolean!
  courseChapter: CourseChapter!
}

type CourseChapter {
  course: String!
  title: String!
  order: Float!
  numOfReading: Float!
  numOfVideo: Float!
  numOfAssignment: Float!
  courseChapterContents: [CourseChapterContent!]!
}

type CourseChapterContent {
  order: Float!
  description: String!
  title: String!
  courseChapter: String!
  contentType: String!
  isMandatory: Boolean!
  timeRequiredInSec: Float!
  isOpenForFree: Boolean!
  duration: Float!
}

input CourseChapterContentDto {
  order: Float!
  description: String!
  title: String!
  courseChapter: String!
  contentType: String!
  isMandatory: Boolean!
  timeRequiredInSec: Float!
  isOpenForFree: Boolean!
  duration: Float!
}

input CourseChapterDto {
  course: String!
  title: String!
  order: Float!
  numOfReading: Float!
  numOfVideo: Float!
  numOfAssignment: Float!
}

input CourseDto {
  instructor: String!
  category: String!
  courseLevel: String!
  courseTitle: String!
  courseSlug: String!
  keywords: [String!]!
  overview: String!
  courseImage: String!
  language: String!
  duration: String!
  price: Float!
  rate: Float!
  rateCount: Float!
  strikeOutPrice: Float!
  isActive: Boolean!
}

type CourseLevel {
  name: String!
}

input CourseLevelDto {
  name: String!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  role: String!
}

type Deleted {
  n: Float!
  ok: Float!
  deletedCount: Float!
}

"""Email Custom Scalar type"""
scalar Email

type Enrollment {
  enrollment: String!
  courseChapterContent: String!
  beginTimestamp: String!
  completionTimestamp: String!
  status: Boolean!
}

input EnrollmentDto {
  enrollment: String!
  courseChapterContent: String!
  beginTimestamp: String!
  completionTimestamp: String!
  status: Boolean!
}

type Feedback {
  student: String!
  course: String!
  isPaidSubscription: String!
}

input FeedbackDto {
  student: String!
  course: String!
  isPaidSubscription: String!
}

type File {
  path: String!
  filename: String!
  mimetype: String!
  uploader: String!
}

input FileDto {
  path: String!
  filename: String!
  mimetype: String!
  uploader: String!
}

type Instructor {
  user: User!
  instructorSlug: String!
  contactEmail: String!
  mobile: String!
  linkFacebook: String!
  linkLinkedin: String!
  linkTwitter: String!
  qualification: String!
  introductionBrief: String!
  profileImage: String!
  numOfPublishedCourses: Float!
  numOfEnrolledStudents: Float!
  averageReviewRating: Float!
  numOfReview: Float!
}

input InstructorDto {
  user: String!
  instructorSlug: String!
  contactEmail: String!
  mobile: String!
  linkFacebook: String!
  linkLinkedin: String!
  linkTwitter: String!
  qualification: String!
  introductionBrief: String!
  profileImage: String!
  numOfPublishedCourses: Float!
  numOfEnrolledStudents: Float!
  averageReviewRating: Float!
  numOfReview: Float!
}

type Language {
  name: String!
}

input LanguageDto {
  name: String!
}

type LearningProgress {
  enrollment: String!
  courseChapterContent: String!
  beginTimestamp: String!
  completionTimestamp: String!
  status: Boolean!
}

input LearningProgressDto {
  enrollment: String!
  courseChapterContent: String!
  beginTimestamp: String!
  completionTimestamp: String!
  status: Boolean!
}

input LoginUserDto {
  username: String!
  password: String!
}

type Mutation {
  login(loginInput: LoginUserDto!): User!
  signup(signUpInput: CreateUserDto!): User!
  createCourseCategory(categoryInput: CategoryDto!): Category!
  updateCourseCategory(categoryInput: CategoryDto!, id: String!): Category!
  deleteCourse(id: String!): Deleted!
  createContentType(contentTypeInput: ContentTypeDto!): ContentType!
  updateContentType(contentTypeInput: ContentTypeDto!, id: String!): ContentType!
  deleteContentType(id: String!): Deleted!
  createCourseChapter(courseChapterInput: CourseChapterDto!): CourseChapter!
  updateCourseChapter(courseChapterInput: CourseChapterDto!, id: String!): CourseChapter!
  deleteCourseChapter(id: String!): Deleted!
  createCourseChapterContent(createCourseChapterContentInput: CourseChapterContentDto!): CourseChapterContent!
  updateCourseChapterContent(updateCourseChapterContentInput: CourseChapterContentDto!, id: String!): CourseChapterContent!
  deleteCourseChapterContent(id: String!): Deleted!
  createCourseLevel(courseLevelInput: CourseLevelDto!): CourseLevel!
  updateCourseLevel(courseLevelInput: CourseLevelDto!, id: String!): CourseLevel!
  createEnrollment(enrollmentInput: EnrollmentDto!): Enrollment!
  updateEnrollment(enrollmentInput: EnrollmentDto!, id: String!): Enrollment!
  deleteEnrollment(id: String!): Deleted!
  createFeedback(feedbackInput: FeedbackDto!): Feedback!
  updateFeedback(feedbackInput: FeedbackDto!, id: String!): Feedback!
  deleteFeedback(id: String!): Deleted!
  createInstructor(instructor: InstructorDto!): Instructor!
  updateInstructor(instructor: InstructorDto!, id: String!): Instructor!
  deleteInstructor(id: String!): Deleted!
  createLanguage(languageInput: LanguageDto!): Language!
  updateLanguage(languageInput: LanguageDto!, id: String!): Language!
  deleteLanguage(id: String!): Deleted!
  createLearningProgress(learningProgressInput: LearningProgressDto!): LearningProgress!
  updateLearningProgress(learningProgressInput: LearningProgressDto!, id: String!): LearningProgress!
  deleteLearningProgress(id: String!): Deleted!
  createRole(roleInput: RoleDto!): Language!
  updateRole(roleInput: RoleDto!, id: String!): Language!
  deleteRole(id: String!): Deleted!
  createStudent(studentInput: StudentDto!): Student!
  updateStudent(studentInput: StudentDto!, id: String!): Student!
  deleteStudent(id: String!): Deleted!
  createUser(userInput: UserDto!): User!
  updateUser(updateInput: UserDto!, id: String!): User!
  deleteUser(id: String!): Deleted!
}

type Query {
  users: [User!]!
  me: User!
  allCourses(skip: Int = 0, take: Int = 25, instructor: String, category: String, level: String, language: String, sortByTime: String, sortByRate: String): [Course!]!
  findCourse(id: String!): Course!
  courseCategories: [Category!]!
  courseCategory(id: String!): Category!
  contentTypes: [ContentType!]!
  contentType(id: String!): ContentType!
  courseChapters: [CourseChapter!]!
  courseChapter(id: String!): CourseChapter!
  courseChapterContents: [CourseChapterContent!]!
  courseChapterContent(id: String!): CourseChapterContent!
  courseLevels: [CourseLevel!]!
  courseLevel(id: String!): CourseLevel!
  enrollments: [Enrollment!]!
  enrollment(id: String!): Enrollment!
  feedbacks: [Feedback!]!
  feedback(id: String!): Feedback!
  instructors: [Instructor!]!
  instructor(id: String!): Instructor!
  languages: [Language!]!
  language(id: String!): Language!
  learningProgresses: [LearningProgress!]!
  learningProgress(id: String!): LearningProgress!
  roles: [Language!]!
  role(id: String!): Language!
  students: [Student!]!
  student(id: String!): Student!
  user(id: String!): User!
}

type Role {
  name: String!
  description: String!
}

input RoleDto {
  name: String!
  description: String!
}

type Student {
  user: String!
  profileImage: String!
  contactEmail: String!
  dob: String!
  numOfCoursesEnrolled: Float!
  numOfCourseCompleted: Float!
}

input StudentDto {
  user: String!
  profileImage: String!
  contactEmail: String!
  dob: String!
  numOfCoursesEnrolled: Float!
  numOfCourseCompleted: Float!
}

type User {
  firstName: String!
  lastName: String!
  email: Email!
  role: String!
  isActive: String!
}

input UserDto {
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  isActive: String!
}

type WishList {
  course: String!
  user: String!
}
